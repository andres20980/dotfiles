---
# OPA Dashboard UI - Simple Web Interface
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-dashboard
  annotations:
    argocd.argoproj.io/sync-wave: "1"
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>OPA Policy Dashboard - Local GitOps</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background: #2c3e50; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
            .card { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .status { display: inline-block; padding: 4px 8px; border-radius: 4px; color: white; font-size: 12px; }
            .status.healthy { background: #27ae60; }
            .query-box { width: 100%; height: 100px; margin: 10px 0; font-family: monospace; }
            .input-box { width: 100%; height: 150px; margin: 10px 0; font-family: monospace; }
            .result-box { background: #ecf0f1; padding: 15px; border-radius: 4px; white-space: pre-wrap; font-family: monospace; }
            button { background: #3498db; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }
            button:hover { background: #2980b9; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ðŸ”’ OPA Policy Dashboard</h1>
                <p>Local GitOps Environment - Policy as Code Management</p>
                <span class="status healthy">OPA Running</span>
            </div>

            <div class="card">
                <h3>ðŸ“‹ System Status</h3>
                <p><strong>OPA Version:</strong> 0.58.0-envoy</p>
                <p><strong>Mode:</strong> Audit Only (Local Dev)</p>
                <p><strong>Endpoint:</strong> http://localhost:30181</p>
                <button onclick="checkHealth()">Check Health</button>
            </div>

            <div class="card">
                <h3>ðŸ§ª Policy Query Testing</h3>
                <label>Query (Rego):</label>
                <textarea class="query-box" id="query" placeholder="data.kubernetes.demo">data.kubernetes.demo</textarea>
                
                <label>Input Data (JSON):</label>
                <textarea class="input-box" id="input" placeholder='{"kind": "Deployment"}'>{"kind": "Deployment", "metadata": {"name": "test", "labels": {}}}</textarea>
                
                <button onclick="queryOPA()">Execute Query</button>
                
                <h4>Result:</h4>
                <div class="result-box" id="result">Click "Execute Query" to test policies...</div>
            </div>
        </div>

        <script>
            const OPA_URL = 'http://localhost:30181';
            
            async function checkHealth() {
                try {
                    const response = await fetch(`${OPA_URL}/health`);
                    const result = await response.text();
                    document.getElementById('result').textContent = `Health: ${response.status}\n${result}`;
                } catch (error) {
                    document.getElementById('result').textContent = `Error: ${error.message}`;
                }
            }
            
            async function queryOPA() {
                const query = document.getElementById('query').value;
                const inputText = document.getElementById('input').value;
                
                let input = {};
                if (inputText.trim()) {
                    try {
                        input = JSON.parse(inputText);
                    } catch (e) {
                        document.getElementById('result').textContent = `JSON Error: ${e.message}`;
                        return;
                    }
                }
                
                try {
                    const response = await fetch(`${OPA_URL}/v1/query`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ query: query, input: input })
                    });
                    
                    const result = await response.json();
                    document.getElementById('result').textContent = JSON.stringify(result, null, 2);
                } catch (error) {
                    document.getElementById('result').textContent = `Query Error: ${error.message}`;
                }
            }
            
            window.onload = checkHealth;
        </script>
    </body>
    </html>
---
# OPA Dashboard Web Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: opa-dashboard-web
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    app: opa-dashboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: opa-dashboard
  template:
    metadata:
      labels:
        app: opa-dashboard
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: dashboard-html
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 50m
            memory: 32Mi
      volumes:
      - name: dashboard-html
        configMap:
          name: opa-dashboard
---
# Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: opa-dashboard
  annotations:
    argocd.argoproj.io/sync-wave: "5"
  labels:
    app: opa-dashboard
spec:
  ports:
  - name: http
    port: 80
    targetPort: 80
    nodePort: 30000
  selector:
    app: opa-dashboard
  type: NodePort